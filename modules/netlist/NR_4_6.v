/* Generated by Yosys 0.53+39 (git sha1 388955031, g++ 12.2.0-14 -fPIC -O3) */

module AndGate(a, b, y);
  input a;
  wire a;
  input b;
  wire b;
  output y;
  wire y;
  AND2x2_ASAP7_75t_R _0_ (
    .A(b),
    .B(a),
    .Y(y)
  );
endmodule

module BitwisePG(A, B, P, G);
  input A;
  wire A;
  input B;
  wire B;
  output G;
  wire G;
  output P;
  wire P;
  AND2x2_ASAP7_75t_R _0_ (
    .A(B),
    .B(A),
    .Y(G)
  );
  XOR2xp5_ASAP7_75t_R _1_ (
    .A(B),
    .B(A),
    .Y(P)
  );
endmodule

module BlackCell(Pi, Gi, Cin, Pj, P, G);
  input Cin;
  wire Cin;
  output G;
  wire G;
  input Gi;
  wire Gi;
  output P;
  wire P;
  input Pi;
  wire Pi;
  input Pj;
  wire Pj;
  AO21x1_ASAP7_75t_R _0_ (
    .A1(Cin),
    .A2(Pi),
    .B(Gi),
    .Y(G)
  );
  AND2x2_ASAP7_75t_R _1_ (
    .A(Pi),
    .B(Pj),
    .Y(P)
  );
endmodule

module FullAdder(a, b, cin, sum, cout);
  wire _0_;
  wire _1_;
  input a;
  wire a;
  input b;
  wire b;
  input cin;
  wire cin;
  output cout;
  wire cout;
  output sum;
  wire sum;
  MAJx2_ASAP7_75t_R _2_ (
    .A(b),
    .B(a),
    .C(cin),
    .Y(cout)
  );
  NOR3xp33_ASAP7_75t_R _3_ (
    .A(b),
    .B(a),
    .C(cin),
    .Y(_0_)
  );
  NAND3xp33_ASAP7_75t_R _4_ (
    .A(b),
    .B(a),
    .C(cin),
    .Y(_1_)
  );
  OAI21xp33_ASAP7_75t_R _5_ (
    .A1(cout),
    .A2(_0_),
    .B(_1_),
    .Y(sum)
  );
endmodule

module GrayCell(Pi, Gi, Cin, P, G);
  input Cin;
  wire Cin;
  output G;
  wire G;
  input Gi;
  wire Gi;
  output P;
  wire P;
  input Pi;
  wire Pi;
  AO21x1_ASAP7_75t_R _0_ (
    .A1(Cin),
    .A2(Pi),
    .B(Gi),
    .Y(G)
  );
  assign P = Pi;
endmodule

module HalfAdder(a, b, sum, cout);
  input a;
  wire a;
  input b;
  wire b;
  output cout;
  wire cout;
  output sum;
  wire sum;
  AND2x2_ASAP7_75t_R _0_ (
    .A(b),
    .B(a),
    .Y(cout)
  );
  XOR2xp5_ASAP7_75t_R _1_ (
    .A(b),
    .B(a),
    .Y(sum)
  );
endmodule

module NR_4_6(A, B, Product);
  input [3:0] A;
  wire [3:0] A;
  input [5:0] B;
  wire [5:0] B;
  wire P_0_0;
  wire P_0_1;
  wire P_0_2;
  wire P_0_3;
  wire P_1_0;
  wire P_1_1;
  wire P_1_2;
  wire P_1_3;
  wire P_2_0;
  wire P_2_1;
  wire P_2_2;
  wire P_2_3;
  wire P_3_0;
  wire P_3_1;
  wire P_3_2;
  wire P_3_3;
  wire P_4_0;
  wire P_4_1;
  wire P_4_2;
  wire P_4_3;
  wire P_5_0;
  wire P_5_1;
  wire P_5_2;
  wire P_5_3;
  output [9:0] Product;
  wire [9:0] Product;
  wire c0;
  wire c1;
  wire c2;
  wire c3;
  wire c4;
  wire c5;
  wire c6;
  wire c7;
  wire c8;
  wire c9;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  AndGate uut0 (
    .a(A[0]),
    .b(B[0]),
    .y(P_0_0)
  );
  AndGate uut1 (
    .a(A[1]),
    .b(B[0]),
    .y(P_0_1)
  );
  AndGate uut10 (
    .a(A[2]),
    .b(B[2]),
    .y(P_2_2)
  );
  AndGate uut11 (
    .a(A[3]),
    .b(B[2]),
    .y(P_2_3)
  );
  AndGate uut12 (
    .a(A[0]),
    .b(B[3]),
    .y(P_3_0)
  );
  AndGate uut13 (
    .a(A[1]),
    .b(B[3]),
    .y(P_3_1)
  );
  AndGate uut14 (
    .a(A[2]),
    .b(B[3]),
    .y(P_3_2)
  );
  AndGate uut15 (
    .a(A[3]),
    .b(B[3]),
    .y(P_3_3)
  );
  AndGate uut16 (
    .a(A[0]),
    .b(B[4]),
    .y(P_4_0)
  );
  AndGate uut17 (
    .a(A[1]),
    .b(B[4]),
    .y(P_4_1)
  );
  AndGate uut18 (
    .a(A[2]),
    .b(B[4]),
    .y(P_4_2)
  );
  AndGate uut19 (
    .a(A[3]),
    .b(B[4]),
    .y(P_4_3)
  );
  AndGate uut2 (
    .a(A[2]),
    .b(B[0]),
    .y(P_0_2)
  );
  AndGate uut20 (
    .a(A[0]),
    .b(B[5]),
    .y(P_5_0)
  );
  AndGate uut21 (
    .a(A[1]),
    .b(B[5]),
    .y(P_5_1)
  );
  AndGate uut22 (
    .a(A[2]),
    .b(B[5]),
    .y(P_5_2)
  );
  AndGate uut23 (
    .a(A[3]),
    .b(B[5]),
    .y(P_5_3)
  );
  HalfAdder uut24 (
    .a(P_0_3),
    .b(P_1_2),
    .cout(c0),
    .sum(s0)
  );
  FullAdder uut25 (
    .a(P_1_3),
    .b(P_2_2),
    .cin(P_3_1),
    .cout(c1),
    .sum(s1)
  );
  FullAdder uut26 (
    .a(P_2_3),
    .b(P_3_2),
    .cin(P_4_1),
    .cout(c2),
    .sum(s2)
  );
  HalfAdder uut27 (
    .a(P_3_3),
    .b(P_4_2),
    .cout(c3),
    .sum(s3)
  );
  HalfAdder uut28 (
    .a(P_0_2),
    .b(P_1_1),
    .cout(c4),
    .sum(s4)
  );
  FullAdder uut29 (
    .a(P_2_1),
    .b(P_3_0),
    .cin(s0),
    .cout(c5),
    .sum(s5)
  );
  AndGate uut3 (
    .a(A[3]),
    .b(B[0]),
    .y(P_0_3)
  );
  FullAdder uut30 (
    .a(P_4_0),
    .b(c0),
    .cin(s1),
    .cout(c6),
    .sum(s6)
  );
  FullAdder uut31 (
    .a(P_5_0),
    .b(c1),
    .cin(s2),
    .cout(c7),
    .sum(s7)
  );
  FullAdder uut32 (
    .a(P_5_1),
    .b(c2),
    .cin(s3),
    .cout(c8),
    .sum(s8)
  );
  FullAdder uut33 (
    .a(P_4_3),
    .b(P_5_2),
    .cin(c3),
    .cout(c9),
    .sum(s9)
  );
  unsignedBrentKungAdder8bit uut34 (
    .A({ P_5_3, c8, c7, c6, c5, c4, P_2_0, P_0_1 }),
    .B({ c9, s9, s8, s7, s6, s5, s4, P_1_0 }),
    .Sum(Product[9:1])
  );
  AndGate uut4 (
    .a(A[0]),
    .b(B[1]),
    .y(P_1_0)
  );
  AndGate uut5 (
    .a(A[1]),
    .b(B[1]),
    .y(P_1_1)
  );
  AndGate uut6 (
    .a(A[2]),
    .b(B[1]),
    .y(P_1_2)
  );
  AndGate uut7 (
    .a(A[3]),
    .b(B[1]),
    .y(P_1_3)
  );
  AndGate uut8 (
    .a(A[0]),
    .b(B[2]),
    .y(P_2_0)
  );
  AndGate uut9 (
    .a(A[1]),
    .b(B[2]),
    .y(P_2_1)
  );
  assign Product[0] = P_0_0;
endmodule

module XorGate(A, B, Y);
  input A;
  wire A;
  input B;
  wire B;
  output Y;
  wire Y;
  XOR2xp5_ASAP7_75t_R _0_ (
    .A(B),
    .B(A),
    .Y(Y)
  );
endmodule

module unsignedBrentKungAdder8bit(A, B, Sum);
  input [7:0] A;
  wire [7:0] A;
  input [7:0] B;
  wire [7:0] B;
  wire G_0_0;
  wire G_0_1;
  wire G_0_2;
  wire G_0_3;
  wire G_0_4;
  wire G_0_5;
  wire G_0_6;
  wire G_0_7;
  wire G_1_1;
  wire G_1_3;
  wire G_1_5;
  wire G_1_7;
  wire G_2_3;
  wire G_2_7;
  wire G_3_7;
  wire G_4_5;
  wire G_5_2;
  wire G_5_4;
  wire G_5_6;
  wire P_0_0;
  wire P_0_1;
  wire P_0_2;
  wire P_0_3;
  wire P_0_4;
  wire P_0_5;
  wire P_0_6;
  wire P_0_7;
  wire P_1_1;
  wire P_1_3;
  wire P_1_5;
  wire P_1_7;
  wire P_2_3;
  wire P_2_7;
  wire P_3_7;
  wire P_4_5;
  wire P_5_2;
  wire P_5_4;
  wire P_5_6;
  output [8:0] Sum;
  wire [8:0] Sum;
  BitwisePG uut0 (
    .A(A[0]),
    .B(B[0]),
    .G(G_0_0),
    .P(P_0_0)
  );
  BitwisePG uut1 (
    .A(A[1]),
    .B(B[1]),
    .G(G_0_1),
    .P(P_0_1)
  );
  BlackCell uut10 (
    .Cin(G_0_4),
    .G(G_1_5),
    .Gi(G_0_5),
    .P(P_1_5),
    .Pi(P_0_5),
    .Pj(P_0_4)
  );
  BlackCell uut11 (
    .Cin(G_0_6),
    .G(G_1_7),
    .Gi(G_0_7),
    .P(P_1_7),
    .Pi(P_0_7),
    .Pj(P_0_6)
  );
  GrayCell uut12 (
    .Cin(G_1_1),
    .G(G_2_3),
    .Gi(G_1_3),
    .P(P_2_3),
    .Pi(P_1_3)
  );
  BlackCell uut13 (
    .Cin(G_1_5),
    .G(G_2_7),
    .Gi(G_1_7),
    .P(P_2_7),
    .Pi(P_1_7),
    .Pj(P_1_5)
  );
  GrayCell uut14 (
    .Cin(G_2_3),
    .G(G_3_7),
    .Gi(G_2_7),
    .P(P_3_7),
    .Pi(P_2_7)
  );
  GrayCell uut15 (
    .Cin(G_2_3),
    .G(G_4_5),
    .Gi(G_1_5),
    .P(P_4_5),
    .Pi(P_1_5)
  );
  GrayCell uut16 (
    .Cin(G_1_1),
    .G(G_5_2),
    .Gi(G_0_2),
    .P(P_5_2),
    .Pi(P_0_2)
  );
  GrayCell uut17 (
    .Cin(G_2_3),
    .G(G_5_4),
    .Gi(G_0_4),
    .P(P_5_4),
    .Pi(P_0_4)
  );
  GrayCell uut18 (
    .Cin(G_4_5),
    .G(G_5_6),
    .Gi(G_0_6),
    .P(P_5_6),
    .Pi(P_0_6)
  );
  XorGate uut19 (
    .A(P_0_1),
    .B(G_0_0),
    .Y(Sum[1])
  );
  BitwisePG uut2 (
    .A(A[2]),
    .B(B[2]),
    .G(G_0_2),
    .P(P_0_2)
  );
  XorGate uut20 (
    .A(P_0_2),
    .B(G_1_1),
    .Y(Sum[2])
  );
  XorGate uut21 (
    .A(P_0_3),
    .B(G_5_2),
    .Y(Sum[3])
  );
  XorGate uut22 (
    .A(P_0_4),
    .B(G_2_3),
    .Y(Sum[4])
  );
  XorGate uut23 (
    .A(P_0_5),
    .B(G_5_4),
    .Y(Sum[5])
  );
  XorGate uut24 (
    .A(P_0_6),
    .B(G_4_5),
    .Y(Sum[6])
  );
  XorGate uut25 (
    .A(P_0_7),
    .B(G_5_6),
    .Y(Sum[7])
  );
  BitwisePG uut3 (
    .A(A[3]),
    .B(B[3]),
    .G(G_0_3),
    .P(P_0_3)
  );
  BitwisePG uut4 (
    .A(A[4]),
    .B(B[4]),
    .G(G_0_4),
    .P(P_0_4)
  );
  BitwisePG uut5 (
    .A(A[5]),
    .B(B[5]),
    .G(G_0_5),
    .P(P_0_5)
  );
  BitwisePG uut6 (
    .A(A[6]),
    .B(B[6]),
    .G(G_0_6),
    .P(P_0_6)
  );
  BitwisePG uut7 (
    .A(A[7]),
    .B(B[7]),
    .G(G_0_7),
    .P(P_0_7)
  );
  GrayCell uut8 (
    .Cin(G_0_0),
    .G(G_1_1),
    .Gi(G_0_1),
    .P(P_1_1),
    .Pi(P_0_1)
  );
  BlackCell uut9 (
    .Cin(G_0_2),
    .G(G_1_3),
    .Gi(G_0_3),
    .P(P_1_3),
    .Pi(P_0_3),
    .Pj(P_0_2)
  );
  assign { Sum[8], Sum[0] } = { G_3_7, P_0_0 };
endmodule
